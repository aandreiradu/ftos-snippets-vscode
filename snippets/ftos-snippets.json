{
  "importServerLibrary": {
    "prefix": "ftos:server:importlib",
    "body": [
      "if(typeof ftosLib === 'undefined' || ftosLib === null)",
      "var ftosLib = importLibrary('<yourLibrary>')"
    ],
    "description": "import and cache a server library"
  },
  "serverFetchQuery": {
    "prefix": "ftos:server:fetchquery",
    "body": [
      "const fetch = {",
      "\tentity: {",
      "\t\tname: 'entityName1',",
      "\t\talias: 'e1',",
      "\t\tattributelist: [{",
      "\t\t\tname: 'attr1Name',",
      "\t\t\talias: 'queryFetchAttr1Alias'",
      "\t\t}]",
      "\t},",
      "\twhere: {",
      "\t\ttype: 'and',",
      "\t\tconditionlist: [{",
      "\t\t\tfirst: 'e1.attr1Name',",
      "\t\t\ttype: 'equals',",
      "\t\t\tsecond: 'val(attr1Value)'",
      "\t\t}]",
      "\t},",
      "\tdistinct: true,",
      "\toptions: {",
      "\t\tdisableAutoLookupJoins: true",
      "\t}",
      "};",
      "const queryRes = getByQuery(fetch)"
    ],
    "description": "Server Fluent Query Snippet"
  },
  "serverFluentQuery": {
    "prefix": "ftos:server:fluentquery",
    "body": [
      "const alias = server.query.getAlias('<TABLE_NAME>')",
      "const query = server.query.from(alias)",
      "  .selectColumns('<REQUEST ONLY NECESSARY DATA>')",
      "  .where('<INSERT CONDITION>')",
      "  .execute()"
    ],
    "description": "Server Fluent Query Snippet"
  },
  "serverFluentQueryTop": {
    "prefix": "ftos:server:fluentqueryTop",
    "body": [
      "const alias = server.query.getAlias('<TABLE_NAME>')",
      "const query = server.query.from(alias)",
      "  .selectColumns('<REQUEST ONLY NECESSARY DATA>')",
      "  .where('<INSERT CONDITION>')",
      "  .top(5)",
      "  .execute()"
    ],
    "description": "Server Fluent Query Snippet"
  },
  "serverFluentQueryLeftJoin": {
    "prefix": "ftos:server:fluentqueryLeftJoin",
    "body": [
      "const tb1 = server.query.getAlias('<TABLE_NAME1>')",
      "const tb2 = server.query.getAlias('<TABLE_NAME2>')",
      "const query = server.query.from(tb1)",
      "  .leftJoin(tb2).on(tb1.<'INSERT COLUMN'>.eq(tb2.<'INSERT COLUMN'>))",
      "  .selectColumns('<REQUEST ONLY NECESSARY DATA>')",
      "  .where('<INSERT CONDITION>')",
      "  .execute()"
    ],
    "description": "Server Fluent Query Left Snippet"
  },
  "serverFluentQueryInnerJoin": {
    "prefix": "ftos:server:fluentqueryInnerJoin",
    "body": [
      "const tb1 = server.query.getAlias('<TABLE_NAME1>')",
      "const tb2 = server.query.getAlias('<TABLE_NAME2>')",
      "const query = server.query.from(tb1)",
      "  .innerJoin(tb2).on(tb1.<'INSERT COLUMN'>.eq(tb2.<'INSERT COLUMN'>))",
      "  .selectColumns('<REQUEST ONLY NECESSARY DATA>')",
      "  .where('<INSERT CONDITION>')",
      "  .execute()"
    ],
    "description": "Server Fluent Query Left Snippet"
  },
  "frequentlyRunnedQueries": {
    "prefix": "ftos:monitoring:frequentlyRunnedQueries",
    "body": [
      "DROP PROCEDURE IF EXISTS dbo.FTOS_Monitor_FrequentlyRunnedQueries_Plans",
      "GO",
      "",
      "CREATE PROCEDURE dbo.FTOS_Monitor_FrequentlyRunnedQueries_Plans AS",
      "BEGIN",
      "",
      "SET NOCOUNT ON",
      "",
      "SELECT TOP(25) qs.execution_count AS [Execution Count],",
      "\t(qs.total_logical_reads)*8/1024.0 AS [Total Logical Reads (MB)],",
      "\t(qs.total_logical_reads/qs.execution_count)*8/1024.0 AS [Avg Logical Reads (MB)],",
      "\t(qs.total_worker_time)/1000.0 AS [Total Worker Time (ms)],",
      "\t(qs.total_worker_time/qs.execution_count)/1000.0 AS [Avg Worker Time (ms)],",
      "\t(qs.total_elapsed_time)/1000.0 AS [Total Elapsed Time (ms)],",
      "\t(qs.total_elapsed_time/qs.execution_count)/1000.0 AS [Avg Elapsed Time (ms)],",
      "\tqs.creation_time AS [Creation Time]",
      "\t,t.text AS [Complete Query Text], qp.query_plan AS [Query Plan]",
      "FROM sys.dm_exec_query_stats AS qs WITH (NOLOCK)",
      "CROSS APPLY sys.dm_exec_sql_text(plan_handle) AS t",
      "CROSS APPLY sys.dm_exec_query_plan(plan_handle) AS qp",
      "WHERE t.dbid = DB_ID()",
      "ORDER BY qs.execution_count DESC OPTION (RECOMPILE);-- frequently ran query",
      "",
      "SET NOCOUNT OFF",
      "END",
      "GO"
    ],
    "description": "FTOS Frequently Runned Queries Plan"
  },
  "highCPUQueries": {
    "prefix": "ftos:monitoring:highCPU",
    "body": [
      "DROP PROCEDURE IF EXISTS dbo.FTOS_Monitor_High_CPU_Queries_Plans",
      "GO",
      "",
      "CREATE PROCEDURE dbo.FTOS_Monitor_High_CPU_Queries_Plans AS",
      "BEGIN",
      "",
      "SET NOCOUNT ON",
      "",
      "SELECT TOP(25) qs.execution_count AS [Execution Count],",
      "\t(qs.total_logical_reads)*8/1024.0 AS [Total Logical Reads (MB)],",
      "\t(qs.total_logical_reads/qs.execution_count)*8/1024.0 AS [Avg Logical Reads (MB)],",
      "\t(qs.total_worker_time)/1000.0 AS [Total Worker Time (ms)],",
      "\t(qs.total_worker_time/qs.execution_count)/1000.0 AS [Avg Worker Time (ms)],",
      "\t(qs.total_elapsed_time)/1000.0 AS [Total Elapsed Time (ms)],",
      "\t(qs.total_elapsed_time/qs.execution_count)/1000.0 AS [Avg Elapsed Time (ms)],",
      "\tqs.creation_time AS [Creation Time]",
      "\t,t.text AS [Complete Query Text], qp.query_plan AS [Query Plan]",
      "FROM sys.dm_exec_query_stats AS qs WITH (NOLOCK)",
      "CROSS APPLY sys.dm_exec_sql_text(plan_handle) AS t",
      "CROSS APPLY sys.dm_exec_query_plan(plan_handle) AS qp",
      "WHERE t.dbid = DB_ID()",
      "ORDER BY [Avg Worker Time (ms)] DESC OPTION (RECOMPILE);-- High CPU query",
      "",
      "SET NOCOUNT OFF",
      "END",
      "GO"
    ],
    "description": "FTOS High CPU Queries Plan"
  },
  "highDiskReadingQueries": {
    "prefix": "ftos:monitoring:highDiskReading",
    "body": [
      "DROP PROCEDURE IF EXISTS dbo.FTOS_Monitor_High_Disk_Reading_Queries_Plans",
      "GO",
      "",
      "CREATE PROCEDURE dbo.FTOS_Monitor_High_Disk_Reading_Queries_Plans AS",
      "BEGIN",
      "",
      "SET NOCOUNT ON",
      "",
      "SELECT TOP(25) qs.execution_count AS [Execution Count],",
      "\t(qs.total_logical_reads)*8/1024.0 AS [Total Logical Reads (MB)],",
      "\t(qs.total_logical_reads/qs.execution_count)*8/1024.0 AS [Avg Logical Reads (MB)],",
      "\t(qs.total_worker_time)/1000.0 AS [Total Worker Time (ms)],",
      "\t(qs.total_worker_time/qs.execution_count)/1000.0 AS [Avg Worker Time (ms)],",
      "\t(qs.total_elapsed_time)/1000.0 AS [Total Elapsed Time (ms)],",
      "\t(qs.total_elapsed_time/qs.execution_count)/1000.0 AS [Avg Elapsed Time (ms)],",
      "\tqs.creation_time AS [Creation Time]",
      "\t,t.text AS [Complete Query Text], qp.query_plan AS [Query Plan]",
      "FROM sys.dm_exec_query_stats AS qs WITH (NOLOCK)",
      "CROSS APPLY sys.dm_exec_sql_text(plan_handle) AS t",
      "CROSS APPLY sys.dm_exec_query_plan(plan_handle) AS qp",
      "WHERE t.dbid = DB_ID()",
      "ORDER BY [Total Logical Reads (MB)] DESC OPTION (RECOMPILE);-- High Disk Reading query",
      "",
      "SET NOCOUNT OFF",
      "END",
      "GO"
    ],
    "description": "FTOS High Disk Reading Queries Plan"
  },
  "longRunningQueries": {
    "prefix": "ftos:monitoring:longRunningQueries",
    "body": [
      "DROP PROCEDURE IF EXISTS dbo.FTOS_Monitor_Long_Running_Queries_Plans",
      "GO",
      "",
      "CREATE PROCEDURE dbo.FTOS_Monitor_Long_Running_Queries_Plans AS",
      "BEGIN",
      "",
      "SET NOCOUNT ON",
      "",
      "SELECT TOP(25) qs.execution_count AS [Execution Count],",
      "\t(qs.total_logical_reads)*8/1024.0 AS [Total Logical Reads (MB)],",
      "\t(qs.total_logical_reads/qs.execution_count)*8/1024.0 AS [Avg Logical Reads (MB)],",
      "\t(qs.total_worker_time)/1000.0 AS [Total Worker Time (ms)],",
      "\t(qs.total_worker_time/qs.execution_count)/1000.0 AS [Avg Worker Time (ms)],",
      "\t(qs.total_elapsed_time)/1000.0 AS [Total Elapsed Time (ms)],",
      "\t(qs.total_elapsed_time/qs.execution_count)/1000.0 AS [Avg Elapsed Time (ms)],",
      "\tqs.creation_time AS [Creation Time]",
      "\t,t.text AS [Complete Query Text], qp.query_plan AS [Query Plan]",
      "FROM sys.dm_exec_query_stats AS qs WITH (NOLOCK)",
      "CROSS APPLY sys.dm_exec_sql_text(plan_handle) AS t",
      "CROSS APPLY sys.dm_exec_query_plan(plan_handle) AS qp",
      "WHERE t.dbid = DB_ID()",
      "ORDER BY [Avg Elapsed Time (ms)] DESC OPTION (RECOMPILE);-- Long Running query",
      "",
      "SET NOCOUNT OFF",
      "END",
      "GO"
    ],
    "description": "FTOS Long Running Queries Plan"
  },
  "spoWho3": {
    "prefix": "ftos:monitoring:spoWho3",
    "body": [
      "/* Object:  StoredProcedure [dbo].[sp_who3]    Script Date: 6/2/2023 2:31:40 PM */",
      "SET ANSI_NULLS ON",
      "GO",
      "SET QUOTED_IDENTIFIER ON",
      "GO",
      "",
      "ALTER  PROCEDURE [dbo].[sp_who3]",
      "@filter SYSNAME = NULL,",
      "@info SYSNAME = NULL,",
      "@orderby SYSNAME = NULL",
      "AS",
      "",
      "BEGIN",
      "\tSET NOCOUNT, XACT_ABORT ON;",
      "\tDECLARE @sqlStmt NVARCHAR(4000), @ParmDefinition NVARCHAR(25) = N'@pFilter SYSNAME', @pFilter SYSNAME, @ParmFlag BIT = 0;",
      "\t",
      "\tIF (@@microsoftversion / 0x01000000) < 11",
      "\t\tTHROW 50001, N'SQL Server version not supported. Please use SQL Server 2012 or higher.', 1;",
      "\t",
      "\tIF (@info IS NOT NULL) AND (UPPER(@info) NOT IN (N'IDLE', N'COUNT', N'SLEEPING'))",
      "\t\tTHROW 50001, N'Invalid parameter value for @info. Please use ''IDLE'', ''COUNT'' or ''SLEEPING''. Default value is null.', 1;",
      "\t",
      "\tIF (@orderby IS NOT NULL) AND (UPPER(@orderby) NOT IN (N'CPU', N'DURATION'))",
      "\t\tTHROW 50001, N'Invalid parameter value for @orderby. Please use ''CPU'' for cpu_time or ''DURATION'' for running_time. Default value is null.', 1;",
      "\t",
      "\tIF (UPPER(@info) IS NULL) -- who is currently active",
      "\t\tBEGIN",
      "\t\t\tSET @sqlStmt = N'SELECT r.session_id, se.host_name, se.login_name, db_name(r.database_id) AS db_name, r.status, r.command,",
      "\t\t\t\tCAST(((DATEDIFF(s,start_time,GetDate()))/3600) as varchar) + '' hour(s), ''",
      "\t\t\t\t+ CAST((DATEDIFF(s,start_time,GetDate())%3600)/60 as varchar) + ''min, ''",
      "\t\t\t\t+ CAST((DATEDIFF(s,start_time,GetDate())%60) as varchar) + '' sec'' as running_time, r.cpu_time,",
      "\t\t\t\tr.blocking_session_id AS blk_by, r.open_transaction_count AS open_tran_count, r.wait_type,",
      "\t\t\t\tobject_name = OBJECT_SCHEMA_NAME(s.objectid,s.dbid) + ''.'' + OBJECT_NAME(s.objectid, s.dbid),",
      "\t\t\t\tprogram_name = se.program_name, p.query_plan AS query_plan,",
      "\t\t\t\tsql_text = SUBSTRING(s.text,",
      "\t\t\t\t\t1+(CASE WHEN r.statement_start_offset = 0 THEN 0 ELSE r.statement_start_offset/2 END),",
      "\t\t\t\t\t1+(CASE WHEN r.statement_end_offset = -1 THEN DATALENGTH(s.text) ELSE r.statement_end_offset/2 END - (CASE WHEN r.statement_start_offset = 0 THEN 0 ELSE r.statement_start_offset/2 END))),",
      "\t\t\t\tr.sql_handle, mg.requested_memory_kb, mg.granted_memory_kb, mg.ideal_memory_kb, mg.query_cost,",
      "\t\t\t\t((((ssu.user_objects_alloc_page_count + (SELECT SUM(tsu.user_objects_alloc_page_count) FROM sys.dm_db_task_space_usage tsu WHERE tsu.session_id = ssu.session_id)) -",
      "\t\t\t\t(ssu.user_objects_dealloc_page_count + (SELECT SUM(tsu.user_objects_dealloc_page_count) FROM sys.dm_db_task_space_usage tsu WHERE tsu.session_id = ssu.session_id)))*8)/1024) AS user_obj_in_tempdb_MB,",
      "\t\t\t\t((((ssu.internal_objects_alloc_page_count + (SELECT SUM(tsu.internal_objects_alloc_page_count) FROM sys.dm_db_task_space_usage tsu WHERE tsu.session_id = ssu.session_id)) -",
      "\t\t\t\t(ssu.internal_objects_dealloc_page_count + (SELECT SUM(tsu.internal_objects_dealloc_page_count) FROM sys.dm_db_task_space_usage tsu WHERE tsu.session_id = ssu.session_id)))*8)/1024) AS internal_obj_in_tempdb_MB,",
      "\t\t\t\tstart_time, percent_complete,",
      "\t\t\t\tCAST((estimated_completion_time/3600000) as varchar) + '' hour(s), ''",
      "\t\t\t\t+ CAST((estimated_completion_time %3600000)/60000 as varchar) + ''min, ''",
      "\t\t\t\t+ CAST((estimated_completion_time %60000)/1000 as varchar) + '' sec'' as est_time_to_go,",
      "\t\t\t\tdateadd(second,estimated_completion_time/1000, getdate()) as est_completion_time",
      "\t\t\tFROM sys.dm_exec_requests r WITH (NOLOCK)  ",
      "\t\t\tJOIN sys.dm_exec_sessions se WITH (NOLOCK) ",
      "\t\t\t\tON r.session_id = se.session_id",
      "\t\t\tLEFT OUTER JOIN sys.dm_exec_query_memory_grants mg WITH (NOLOCK) ",
      "\t\t\t\tON r.session_id = mg.session_id AND r.request_id = mg.request_id",
      "\t\t\tLEFT OUTER JOIN sys.dm_db_session_space_usage ssu WITH (NOLOCK) ",
      "\t\t\t\tON r.session_id = ssu.session_id",
      "\t\t\tOUTER APPLY sys.dm_exec_sql_text(r.sql_handle) s ",
      "\t\t\tOUTER APPLY sys.dm_exec_query_plan(r.plan_handle) p ';",
      "\t\t\t",
      "\t\t\tIF (@filter IS NULL)",
      "\t\t\t\tSET @sqlStmt += N' WHERE r.session_id <> @@SPID AND se.is_user_process = 1';",
      "\t\t\tELSE",
      "\t\t\t\tBEGIN",
      "\t\t\t\t\tIF (PATINDEX ('%[^0-9]%' , ISNULL(@filter,'z')) = 0)  -- that's a spid",
      "\t\t\t\t\t\tSET @sqlStmt += N' WHERE r.session_id = @pFilter';",
      "\t\t\t\t\tELSE",
      "\t\t\t\t\t\tSET @sqlStmt += N' WHERE se.login_name = @pFilter';",
      "\t\t\t\t\t",
      "\t\t\t\t\tSET @ParmFlag = 1",
      "\t\t\t\tEND;",
      "\t\t\t",
      "\t\t\tIF (@orderby IS NOT NULL)",
      "\t\t\t\tBEGIN",
      "\t\t\t\t\tIF (UPPER(@orderby) = N'CPU' )",
      "\t\t\t\t\t\tSET @sqlStmt += N' ORDER BY r.cpu_time DESC';",
      "\t\t\t\t\tELSE IF (UPPER(@orderby) = N'DURATION')",
      "\t\t\t\t\t\tSET @sqlStmt += N' ORDER BY running_time DESC';",
      "\t\t\t\t\t",
      "\t\t\t\tEND;",
      "\t\tEND;",
      "\tELSE IF (UPPER(@info) = 'IDLE') -- who is idle that have open transactions",
      "\t\tBEGIN",
      "\t\t\tSET @sqlStmt = N'SELECT s.session_id, host_name, login_name, DB_NAME(database_id) AS db_name, program_name, status,",
      "\t\t\t\t\t(memory_usage/128.0)/1024 as memory_usage_gb,",
      "\t\t\t\t\tCAST(((DATEDIFF(s,login_time,GetDate()))/3600) as varchar) + '' hour(s), ''",
      "\t\t\t\t\t\t+ CAST((DATEDIFF(s,login_time,GetDate())%3600)/60 as varchar) + ''min, ''",
      "\t\t\t\t\t\t+ CAST((DATEDIFF(s,login_time,GetDate())%60) as varchar) + '' sec'' as running_time, open_transaction_count",
      "\t\t\t\tFROM sys.dm_exec_sessions s WITH (NOLOCK) ",
      "\t\t\t\tWHERE EXISTS (SELECT * FROM sys.dm_tran_session_transactions t WITH (NOLOCK) WHERE t.session_id = s.session_id) ",
      "\t\t\t\tAND NOT EXISTS (SELECT * FROM sys.dm_exec_requests r WITH (NOLOCK) WHERE r.session_id = s.session_id) AND is_user_process = 1';",
      "\t\tEND;",
      "\tELSE IF (UPPER(@info) = 'COUNT') -- who is connected and how many sessions it has ",
      "\t\tBEGIN",
      "\t\t\tSET @sqlStmt = N'SELECT login_name, [program_name], connections_count = COUNT(s.session_id) ",
      "\t\t\t\tFROM sys.dm_exec_connections c WITH (NOLOCK)  ",
      "\t\t\t\tJOIN sys.dm_exec_sessions s WITH (NOLOCK) ON c.session_id = s.session_id';",
      "\t\t\t",
      "\t\t\tIF (@filter IS NULL)",
      "\t\t\t\tSET @sqlStmt += N' WHERE c.session_id <> @@SPID AND s.is_user_process = 1';",
      "\t\t\tELSE",
      "\t\t\t\tBEGIN",
      "\t\t\t\t\tSET @sqlStmt += N' WHERE se.login_name = @pFilter';",
      "\t\t\t\t\tSET @ParmFlag = 1;",
      "\t\t\t\tEND;",
      "\t\t\t\t",
      "\t\t\tSET @sqlStmt += N' GROUP BY login_name, [program_name] ORDER BY COUNT(s.session_id) DESC';",
      "\t\tEND;",
      "\tELSE IF (UPPER(@info) = 'SLEEPING') -- who is sleeping (currently running no requests)",
      "\t\tBEGIN",
      "\t\t\tSET @sqlStmt = N'SELECT s.session_id, s.host_name, s.login_name, s.program_name, db_name(s.database_id) AS db_name, s.status,",
      "\t\t\t\t\t+ CAST((DATEDIFF(s,c.connect_time,GetDate())%3600)/60 as varchar) + ''min, ''",
      "\t\t\t\t\t+ CAST((DATEDIFF(s,c.connect_time,GetDate())%60) as varchar) + '' sec '' as running_time,",
      "\t\t\t\tt.text AS most_recent_sql_handle",
      "\t\t\t\tFROM sys.dm_exec_connections c WITH (NOLOCK) ",
      "\t\t\t\tJOIN sys.dm_exec_sessions s WITH (NOLOCK) ON c.session_id = s.session_id",
      "\t\t\t\tOUTER APPLY sys.dm_exec_sql_text(c.most_recent_sql_handle) t",
      "\t\t\t\tWHERE s.is_user_process = 1 AND s.status = ''sleeping''';",
      "\t\t\t",
      "\t\t\tIF (@filter IS NULL)",
      "\t\t\t\tSET @sqlStmt += N' AND s.session_id <> @@SPID';",
      "\t\t\tELSE",
      "\t\t\t\tBEGIN",
      "\t\t\t\t\tIF (PATINDEX ('%[^0-9]%' , ISNULL(@filter,'z')) = 0)",
      "\t\t\t\t\t\tSET @sqlStmt += N' AND s.session_id = @pFilter';",
      "\t\t\t\t\tELSE",
      "\t\t\t\t\t\tSET @sqlStmt += N' AND s.login_name = @pFilter';",
      "\t\t\t\t\t",
      "\t\t\t\t\tSET @ParmFlag = 1;",
      "\t\t\t\tEND;",
      "\t\t\t",
      "\t\t\tIF (@orderby IS NOT NULL)",
      "\t\t\t\tBEGIN",
      "\t\t\t\t\tIF (UPPER(@orderby) = N'DURATION')",
      "\t\t\t\t\t\tSET @sqlStmt += N' ORDER BY running_time DESC';",
      "\t\t\t\t\t",
      "\t\t\t\tEND;",
      "\t\tEND;",
      "\t",
      "\tIF @ParmFlag = 0",
      "\t\tEXECUTE sp_executesql @sqlStmt;",
      "\tELSE",
      "\t\tEXECUTE sp_executesql @sqlStmt, @ParmDefinition, @pFilter = @filter;",
      "END;",
      "GO"
    ],
    "description": "FTOS SP_WHO V3"
  },
  "worstSQL": {
    "prefix": "ftos:monitoring:worstSQL",
    "body": [
      "/* Object:  StoredProcedure [dbo].[usp_Worst_TSQL]    Script Date: 6/2/2023 2:32:40 PM */",
      "SET ANSI_NULLS ON",
      "GO",
      "SET QUOTED_IDENTIFIER ON",
      "GO",
      "--  exec [usp_Worst_TSQL]",
      "ALTER PROC [dbo].[usp_Worst_TSQL]",
      "/*",
      "Name: usp_Worst_TSQL",
      "Description: This stored procedure displays the top worst performing queries based on CPU, Execution Count,",
      "I/O and Elapsed_Time as identified using DMV information.  This can be display the worst",
      "performing queries from an instance, or database perspective.   The number of records shown,",
      "the database, and the sort order are identified by passing pararmeters.",
      "",
      "Parameters:  There are three different parameters that can be passed to this procedures: @DBNAME, @COUNT",
      "the TOP x rows, where x is equal to @COUNT will be returned, based on the @ORDERBY parameter.",
      "",
      "Typical execution calls",
      "",
      "Top 6 statements in the AdventureWorks database base on Average CPU Usage:",
      "EXEC usp_Worst_TSQL @DBNAME='TesteSedComLibris01',@COUNT=100,@ORDERBY='ACPU';",
      "",
      "Top 100 statements order by Average IO",
      "EXEC usp_Worst_TSQL @COUNT=100,@ORDERBY='ALR';",
      "",
      "Show top all statements by Average IO",
      "EXEC usp_Worst_TSQL;",
      "*/",
      "(@DBNAME VARCHAR(128) = '<not supplied>'",
      " ,@COUNT INT = 999999999",
      " ,@ORDERBY VARCHAR(4) = 'AIO')",
      "AS",
      "-- Check for valid @ORDERBY parameter",
      "IF ((SELECT CASE WHEN",
      "      @ORDERBY in ('ACPU','TCPU','AE','TE','EC','AIO','TIO','ALR','TLR','ALW','TLW','APR','TPR')",
      "         THEN 1 ELSE 0 END) = 0)",
      "BEGIN",
      "   -- abort if invalid @ORDERBY parameter entered",
      "   RAISERROR('@ORDERBY parameter not APCU, TCPU, AE, TE, EC, AIO, TIO, ALR, TLR, ALW, TLW, APR or TPR',11,1)",
      "   RETURN",
      " END",
      " SELECT TOP (@COUNT)",
      "         COALESCE(DB_NAME(st.dbid),",
      "                  DB_NAME(CAST(pa.value AS INT))+'*',",
      "                 'Resource') AS [Database Name]",
      "         -- find the offset of the actual statement being executed",
      "         ,SUBSTRING(text,",
      "                 CASE WHEN statement_start_offset = 0",
      "                          OR statement_start_offset IS NULL",
      "                           THEN 1",
      "                           ELSE statement_start_offset/2 + 1 END,",
      "               CASE WHEN statement_end_offset = 0",
      "                          OR statement_end_offset = -1",
      "          OR statement_end_offset IS NULL",
      "                           THEN LEN(text)",
      "                           ELSE statement_end_offset/2 END -",
      "                     CASE WHEN statement_start_offset = 0",
      "                            OR statement_start_offset IS NULL",
      "       THEN 1",
      "                             ELSE statement_start_offset/2  END + 1",
      "                  )  AS [Statement]",
      "         ,OBJECT_SCHEMA_NAME(st.objectid,dbid) [Schema Name]",
      "         ,OBJECT_NAME(st.objectid,dbid) [Object Name]",
      "         ,objtype [Cached Plan objtype]",
      "         ,execution_count [Execution Count]",
      "         ,(total_logical_reads + total_logical_writes + total_physical_reads )/execution_count [Average IOs]",
      "         ,total_logical_reads + total_logical_writes + total_physical_reads [Total IOs]",
      "         ,total_logical_reads/execution_count [Avg Logical Reads]",
      "         ,total_logical_reads [Total Logical Reads]",
      "         ,total_logical_writes/execution_count [Avg Logical Writes]",
      "         ,total_logical_writes [Total Logical Writes]",
      "         ,total_physical_reads/execution_count [Avg Physical Reads]",
      "         ,total_physical_reads [Total Physical Reads]",
      "         ,total_worker_time / execution_count [Avg CPU]",
      "         ,total_worker_time [Total CPU]",
      "         ,total_elapsed_time / execution_count [Avg Elapsed Time]",
      "         ,total_elapsed_time  [Total Elasped Time]",
      "         ,last_execution_time [Last Execution Time]",
      "    --into ___PerfStats_25_11_2010",
      "    FROM sys.dm_exec_query_stats qs",
      "    JOIN sys.dm_exec_cached_plans cp ON qs.plan_handle = cp.plan_handle",
      "    CROSS APPLY sys.dm_exec_sql_text(qs.plan_handle) st",
      "    OUTER APPLY sys.dm_exec_plan_attributes(qs.plan_handle) pa",
      "    WHERE attribute = 'dbid' AND",
      "     CASE when @DBNAME = '<not supplied>' THEN '<not supplied>'",
      "                               ELSE COALESCE(DB_NAME(st.dbid),",
      "                                          DB_NAME(CAST(pa.value AS INT)) + '*',",
      "                                          'Resource') END",
      "                                    IN (RTRIM(@DBNAME),RTRIM(@DBNAME) + '*')",
      "  ORDER BY CASE",
      "              WHEN @ORDERBY = 'ACPU' THEN total_worker_time / execution_count",
      "              WHEN @ORDERBY = 'TCPU'  THEN total_worker_time",
      "              WHEN @ORDERBY = 'AE'   THEN total_elapsed_time / execution_count",
      "              WHEN @ORDERBY = 'TE'   THEN total_elapsed_time",
      "              WHEN @ORDERBY = 'EC'   THEN execution_count",
      "              WHEN @ORDERBY = 'AIO'  THEN (total_logical_reads + total_logical_writes + total_physical_reads) / execution_count",
      "              WHEN @ORDERBY = 'TIO'  THEN total_logical_reads + total_logical_writes + total_physical_reads",
      "              WHEN @ORDERBY = 'ALR'  THEN total_logical_reads  / execution_count",
      "              WHEN @ORDERBY = 'TLR'  THEN total_logical_reads",
      "              WHEN @ORDERBY = 'ALW'  THEN total_logical_writes / execution_count",
      "              WHEN @ORDERBY = 'TLW'  THEN total_logical_writes",
      "              WHEN @ORDERBY = 'APR'  THEN total_physical_reads / execution_count",
      "              WHEN @ORDERBY = 'TPR'  THEN total_physical_reads",
      "         END DESC"
    ],
    "description": "FTOS Worst SQL"
  },
  "deadlocksIdentifier": {
    "prefix": "ftos:monitoring:deadlocks",
    "body": [],
    "description": "TODO: Returns the deadlocks identifier procedure"
  },
  "lockChain": {
    "prefix": "ftos:monitoring:lockchain",
    "body": [],
    "description": "TODO: Returns the lockchain identifier procedure"
  }
}
